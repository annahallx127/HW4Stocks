package controller;

import model.Model;
import model.Portfolio;
import model.Stock;
import view.JFrameView;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;

/**
 * The JFrameControllerImpl class implements ActionListener to handle user interactions within
 * the JFrameView of the stock investment application. This controller links the model and view
 * components, ensuring that user inputs are processed and the appropriate actions are taken
 * within the model. It is responsible for initializing action listeners on various UI
 * elements such as buttons and menus, and routing these actions to specific methods
 * that handle the business logic. The controller manages a variety of tasks including
 * creating new portfolios, buying and selling stocks, and loading and saving portfolio data.
 * This design separates the application's state management and business logic from the user
 * interface, following the MVC (Model-View-Controller) architectural pattern to promote
 * organized code and scalability.
 */
public class JFrameControllerImpl implements ActionListener {
  private final Model model;
  private final JFrameView view;

  /**
   * Constructs a controller for the JFrame application that manages interaction between
   * the model and the view. Initializes the view and model, setting up action listeners
   * for the various user interface components.
   *
   * @param model The business logic model of the application.
   * @param view The graphical user interface of the application.
   * @throws NullPointerException if either the model or view is null.
   */
  public JFrameControllerImpl(Model model, JFrameView view) {
    this.view = Objects.requireNonNull(view, "View can not be null.");
    this.model = Objects.requireNonNull(model, "Model can not be null.");

    view.addCreateNewPortfolioListener(this);
    view.addCreateNewPortfolioConfirmListener(this);
    view.addBuyOrSellEnterListener(this);
    view.addFindValueEnterListener(this);
    view.addFindCompEnterListener(this);
    view.addLoadPortfolioListener(this);
    view.addSavePortfolioEnterListener(this);
  }

  /**
   * Responds to action events generated by the view's user interface components.
   * This method determines which component fired the event and calls the appropriate
   * method to handle the action.
   *
   * @param e The action event that was fired.
   */
  @Override
  public void actionPerformed(ActionEvent e) {
    switch (e.getActionCommand()) {
      case "createNewPortfolio":
        view.createNewPortfolioWindow();
        break;
      case "createPortfolioConfirm":
        handleCreateNewPortfolio();
        break;
      case "buyStock":
        view.buyOrSellWindow();
        break;
      case "enterTransaction":
        handleTransaction();
        break;
      case "findValue":
        view.findValueWindow();
        break;
      case "findValueEnter":
        handleFindValue();
        break;
      case "findComposition":
        view.findCompositionWindow();
        break;
      case "findCompositionEnter":
        handleFindComposition();
        break;
      case "savePortfolioEnter":
        handleSavePortfolio();
        break;
      case "loadPortfolio":
        handleLoadPortfolio();
        break;
    }
  }

  private void handleCreateNewPortfolio() {
    String portfolioName = view.getCurrentPortfolioName();

    if (portfolioName == null || portfolioName.isEmpty()) {
      view.displayErrorMessage("Invalid portfolio name.");
      return;
    }

    try {
      model.makePortfolio(portfolioName);
    } catch (IllegalArgumentException e) {
      view.displayErrorMessage(e.getMessage());
    }
    view.closeCreateNewPortfolioWindow();
  }

  private void handleTransaction() {
    String transactionType = view.getTransactionType().trim();
    String stockTicker = view.getStockTicker().trim().toUpperCase();

    int sharesNum;
    try {
      sharesNum = Integer.parseInt(view.getNumOfShares().trim());
    } catch (NumberFormatException e) {
      view.displayErrorMessage("Invalid number of shares.");
      return;
    }

    String year = view.getTransactionYear().trim();
    String month = view.getTransactionMonth().trim();
    String day = view.getTransactionDay().trim();

    String portfolioName = view.getCurrentPortfolioName();
    if (portfolioName == null || portfolioName.isEmpty()) {
      view.displayErrorMessage("Please select a valid portfolio.");
      return;
    }

    Portfolio portfolio = model.getPortfolios().get(portfolioName);
    if (portfolio == null) {
      view.displayErrorMessage("Portfolio not found.");
      return;
    }

    if (year.isEmpty() || month.isEmpty() || day.isEmpty()) {
      view.displayErrorMessage("Please enter a valid date.");
      return;
    }

    Stock stock;
    try {
      stock = model.get(stockTicker);
    } catch (IllegalArgumentException e) {
      view.displayErrorMessage("Invalid stock ticker. Try again.");
      return;
    }

    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    String date = year + "-" + month + "-" + day;
    try {
      date = format.format(format.parse(date));
    } catch (ParseException e) {
      view.displayErrorMessage("Invalid date format.");
      return;
    }

    try {
      if (transactionType.equalsIgnoreCase("buy")) {
        portfolio.add(stock, sharesNum, date);
        view.displayMessage("Bought " + sharesNum + " share(s) of "
                + stock + " on " + date);
      } else if (transactionType.equalsIgnoreCase("sell")) {
        portfolio.remove(stock, sharesNum, date);
        view.displayMessage("Sold " + sharesNum + " share(s) of "
                + stock + " on " + date);
      } else {
        view.displayErrorMessage("Invalid transaction type.");
      }
    } catch (IllegalArgumentException e) {
      view.displayErrorMessage(e.getMessage());
    }
  }


  private void handleFindValue() {
    String year = view.getTransactionYear().trim();
    String month = view.getTransactionMonth().trim();
    String day = view.getTransactionDay().trim();
    String portfolioName = view.getCurrentPortfolioName();

    if (portfolioName == null || portfolioName.isEmpty()) {
      view.displayErrorMessage("Please select a valid portfolio.");
      return;
    }

    Portfolio portfolio = model.getPortfolios().get(portfolioName);
    if (portfolio == null) {
      view.displayErrorMessage("Portfolio not found.");
      return;
    }

    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

    String date = year + "-" + month + "-" + day;
    try {
      Date parsedDate = format.parse(date);
      String formattedDate = format.format(parsedDate);

      String ret = String.valueOf(portfolio.valueOfPortfolio(formattedDate));

      if (ret.equals(
              "Cannot check portfolio value on weekend, please enter a market date.")) {
        view.displayErrorMessage("Please Enter a Valid Market Date!");
      } else if (ret.equals("Date cannot be in the future.")) {
        view.displayErrorMessage("Date cannot be in the future.");
      } else {
        view.displayMessage(ret);
      }
    } catch (ParseException e) {
      view.displayErrorMessage("Invalid date format.");
    } catch (IllegalArgumentException e) {
      view.displayErrorMessage(e.getMessage());
    }
  }


  private void handleFindComposition() {
    String year = view.getTransactionYear().trim();
    String month = view.getTransactionMonth().trim();
    String day = view.getTransactionDay().trim();
    String portfolioName = view.getCurrentPortfolioName();

    if (portfolioName == null || portfolioName.isEmpty()) {
      view.displayErrorMessage("Please select a valid portfolio.");
      return;
    }

    Portfolio portfolio = model.getPortfolios().get(portfolioName);
    if (portfolio == null) {
      view.displayErrorMessage("Portfolio not found.");
      return;
    }

    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

    String date = year + "-" + month + "-" + day;
    try {
      Date parsedDate = format.parse(date);
      String formattedDate = format.format(parsedDate);

      String ret = portfolio.getCompositionAtDate(formattedDate);

      if (ret.equals("No transactions have been made in this portfolio yet.")) {
        view.displayErrorMessage("No transactions have been made in this portfolio yet.");
      } else {
        view.displayMessage(ret);
      }
    } catch (ParseException e) {
      view.displayErrorMessage("Invalid date format.");
    } catch (IllegalArgumentException e) {
      view.displayErrorMessage(e.getMessage());
    }
  }


  private void handleSavePortfolio() {
    String year = view.getTransactionYear().trim();
    String month = view.getTransactionMonth().trim();
    String day = view.getTransactionDay().trim();
    String portfolioName = view.getCurrentPortfolioName();

    if (portfolioName == null || portfolioName.isEmpty()) {
      view.displayErrorMessage("Please select a valid portfolio.");
      return;
    }

    Portfolio portfolio = model.getPortfolios().get(portfolioName);
    if (portfolio == null) {
      view.displayErrorMessage("Portfolio not found.");
      return;
    }

    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

    String date = year + "-" + month + "-" + day;
    try {
      Date parsedDate = format.parse(date);
      String formattedDate = format.format(parsedDate);

      model.savePortfolio(portfolioName, formattedDate);
      view.displayMessage("Portfolio " + portfolioName + " saved.");
    } catch (ParseException e) {
      view.displayErrorMessage("Invalid date format.");
    } catch (IllegalArgumentException e) {
      view.displayErrorMessage(e.getMessage());
    }
  }

  private void handleLoadPortfolio() {
    if (view.loadNewPortfolio()) {
      model.loadPortfolio(view.getLoadedPortfolioName(),
              view.getLoadedPortfolioFile().getParent());
    }
    view.displayMessage("Portfolio " + view.getLoadedPortfolioName() + " loaded.");
  }
}
